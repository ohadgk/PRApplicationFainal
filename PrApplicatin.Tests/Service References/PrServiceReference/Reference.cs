//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PrApplicatin.Tests.PrServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Guest", Namespace="http://schemas.datacontract.org/2004/07/WCF_Azure_Service", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Guest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> AllCompanionsArrivedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AtendedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AtendedCompanionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PrApplicatin.Tests.PrServiceReference.Event EventField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EventIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QRCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> AllCompanionsArrived {
            get {
                return this.AllCompanionsArrivedField;
            }
            set {
                if ((this.AllCompanionsArrivedField.Equals(value) != true)) {
                    this.AllCompanionsArrivedField = value;
                    this.RaisePropertyChanged("AllCompanionsArrived");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Atended {
            get {
                return this.AtendedField;
            }
            set {
                if ((this.AtendedField.Equals(value) != true)) {
                    this.AtendedField = value;
                    this.RaisePropertyChanged("Atended");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AtendedCompanions {
            get {
                return this.AtendedCompanionsField;
            }
            set {
                if ((this.AtendedCompanionsField.Equals(value) != true)) {
                    this.AtendedCompanionsField = value;
                    this.RaisePropertyChanged("AtendedCompanions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Companions {
            get {
                return this.CompanionsField;
            }
            set {
                if ((this.CompanionsField.Equals(value) != true)) {
                    this.CompanionsField = value;
                    this.RaisePropertyChanged("Companions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PrApplicatin.Tests.PrServiceReference.Event Event {
            get {
                return this.EventField;
            }
            set {
                if ((object.ReferenceEquals(this.EventField, value) != true)) {
                    this.EventField = value;
                    this.RaisePropertyChanged("Event");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventId {
            get {
                return this.EventIdField;
            }
            set {
                if ((this.EventIdField.Equals(value) != true)) {
                    this.EventIdField = value;
                    this.RaisePropertyChanged("EventId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QRCode {
            get {
                return this.QRCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.QRCodeField, value) != true)) {
                    this.QRCodeField = value;
                    this.RaisePropertyChanged("QRCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Event", Namespace="http://schemas.datacontract.org/2004/07/WCF_Azure_Service", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Event : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PrApplicatin.Tests.PrServiceReference.Guest[] GuestsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PrApplicatin.Tests.PrServiceReference.Guest[] Guests {
            get {
                return this.GuestsField;
            }
            set {
                if ((object.ReferenceEquals(this.GuestsField, value) != true)) {
                    this.GuestsField = value;
                    this.RaisePropertyChanged("Guests");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/WCF_Azure_Service")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAdmin {
            get {
                return this.IsAdminField;
            }
            set {
                if ((this.IsAdminField.Equals(value) != true)) {
                    this.IsAdminField = value;
                    this.RaisePropertyChanged("IsAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PrServiceReference.IPrService")]
    public interface IPrService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/GetGuestsByEventIdAndGuestName", ReplyAction="http://tempuri.org/IPrService/GetGuestsByEventIdAndGuestNameResponse")]
        PrApplicatin.Tests.PrServiceReference.Guest[] GetGuestsByEventIdAndGuestName(int eventId, string guestFullName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/GetGuestsByEventIdAndGuestName", ReplyAction="http://tempuri.org/IPrService/GetGuestsByEventIdAndGuestNameResponse")]
        System.Threading.Tasks.Task<PrApplicatin.Tests.PrServiceReference.Guest[]> GetGuestsByEventIdAndGuestNameAsync(int eventId, string guestFullName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/EncryptPass", ReplyAction="http://tempuri.org/IPrService/EncryptPassResponse")]
        string EncryptPass(string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/EncryptPass", ReplyAction="http://tempuri.org/IPrService/EncryptPassResponse")]
        System.Threading.Tasks.Task<string> EncryptPassAsync(string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/GetSpecificGuest", ReplyAction="http://tempuri.org/IPrService/GetSpecificGuestResponse")]
        PrApplicatin.Tests.PrServiceReference.Guest GetSpecificGuest(int eventId, int guestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/GetSpecificGuest", ReplyAction="http://tempuri.org/IPrService/GetSpecificGuestResponse")]
        System.Threading.Tasks.Task<PrApplicatin.Tests.PrServiceReference.Guest> GetSpecificGuestAsync(int eventId, int guestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/ChangeGuestStatus", ReplyAction="http://tempuri.org/IPrService/ChangeGuestStatusResponse")]
        bool ChangeGuestStatus(int eventId, int guestId, bool attended, bool allCompanionsArrived, int companionsThatArrived);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/ChangeGuestStatus", ReplyAction="http://tempuri.org/IPrService/ChangeGuestStatusResponse")]
        System.Threading.Tasks.Task<bool> ChangeGuestStatusAsync(int eventId, int guestId, bool attended, bool allCompanionsArrived, int companionsThatArrived);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/GetEventByID", ReplyAction="http://tempuri.org/IPrService/GetEventByIDResponse")]
        PrApplicatin.Tests.PrServiceReference.Event GetEventByID(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/GetEventByID", ReplyAction="http://tempuri.org/IPrService/GetEventByIDResponse")]
        System.Threading.Tasks.Task<PrApplicatin.Tests.PrServiceReference.Event> GetEventByIDAsync(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/GetEvent", ReplyAction="http://tempuri.org/IPrService/GetEventResponse")]
        PrApplicatin.Tests.PrServiceReference.Event GetEvent(string eventName, System.DateTime eventDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/GetEvent", ReplyAction="http://tempuri.org/IPrService/GetEventResponse")]
        System.Threading.Tasks.Task<PrApplicatin.Tests.PrServiceReference.Event> GetEventAsync(string eventName, System.DateTime eventDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/RemoveEvent", ReplyAction="http://tempuri.org/IPrService/RemoveEventResponse")]
        bool RemoveEvent(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/RemoveEvent", ReplyAction="http://tempuri.org/IPrService/RemoveEventResponse")]
        System.Threading.Tasks.Task<bool> RemoveEventAsync(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/GetEvents", ReplyAction="http://tempuri.org/IPrService/GetEventsResponse")]
        PrApplicatin.Tests.PrServiceReference.Event[] GetEvents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/GetEvents", ReplyAction="http://tempuri.org/IPrService/GetEventsResponse")]
        System.Threading.Tasks.Task<PrApplicatin.Tests.PrServiceReference.Event[]> GetEventsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/GetEventsByEventName", ReplyAction="http://tempuri.org/IPrService/GetEventsByEventNameResponse")]
        PrApplicatin.Tests.PrServiceReference.Event[] GetEventsByEventName(string eventName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/GetEventsByEventName", ReplyAction="http://tempuri.org/IPrService/GetEventsByEventNameResponse")]
        System.Threading.Tasks.Task<PrApplicatin.Tests.PrServiceReference.Event[]> GetEventsByEventNameAsync(string eventName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/GetEventsByEventDate", ReplyAction="http://tempuri.org/IPrService/GetEventsByEventDateResponse")]
        PrApplicatin.Tests.PrServiceReference.Event[] GetEventsByEventDate(System.DateTime eventDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/GetEventsByEventDate", ReplyAction="http://tempuri.org/IPrService/GetEventsByEventDateResponse")]
        System.Threading.Tasks.Task<PrApplicatin.Tests.PrServiceReference.Event[]> GetEventsByEventDateAsync(System.DateTime eventDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/CreateEvent", ReplyAction="http://tempuri.org/IPrService/CreateEventResponse")]
        bool CreateEvent(string eventName, System.DateTime eventDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/CreateEvent", ReplyAction="http://tempuri.org/IPrService/CreateEventResponse")]
        System.Threading.Tasks.Task<bool> CreateEventAsync(string eventName, System.DateTime eventDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/AddGuest", ReplyAction="http://tempuri.org/IPrService/AddGuestResponse")]
        bool AddGuest(int eventId, PrApplicatin.Tests.PrServiceReference.Guest guest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/AddGuest", ReplyAction="http://tempuri.org/IPrService/AddGuestResponse")]
        System.Threading.Tasks.Task<bool> AddGuestAsync(int eventId, PrApplicatin.Tests.PrServiceReference.Guest guest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/RemoveGuest", ReplyAction="http://tempuri.org/IPrService/RemoveGuestResponse")]
        bool RemoveGuest(int eventId, int guestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/RemoveGuest", ReplyAction="http://tempuri.org/IPrService/RemoveGuestResponse")]
        System.Threading.Tasks.Task<bool> RemoveGuestAsync(int eventId, int guestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/GetUsers", ReplyAction="http://tempuri.org/IPrService/GetUsersResponse")]
        PrApplicatin.Tests.PrServiceReference.User[] GetUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/GetUsers", ReplyAction="http://tempuri.org/IPrService/GetUsersResponse")]
        System.Threading.Tasks.Task<PrApplicatin.Tests.PrServiceReference.User[]> GetUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/GetUserById", ReplyAction="http://tempuri.org/IPrService/GetUserByIdResponse")]
        PrApplicatin.Tests.PrServiceReference.User GetUserById(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/GetUserById", ReplyAction="http://tempuri.org/IPrService/GetUserByIdResponse")]
        System.Threading.Tasks.Task<PrApplicatin.Tests.PrServiceReference.User> GetUserByIdAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/AddUser", ReplyAction="http://tempuri.org/IPrService/AddUserResponse")]
        bool AddUser(string userName, string password, bool isAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/AddUser", ReplyAction="http://tempuri.org/IPrService/AddUserResponse")]
        System.Threading.Tasks.Task<bool> AddUserAsync(string userName, string password, bool isAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/RemoveUserByUserName", ReplyAction="http://tempuri.org/IPrService/RemoveUserByUserNameResponse")]
        bool RemoveUserByUserName(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrService/RemoveUserByUserName", ReplyAction="http://tempuri.org/IPrService/RemoveUserByUserNameResponse")]
        System.Threading.Tasks.Task<bool> RemoveUserByUserNameAsync(string userName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPrServiceChannel : PrApplicatin.Tests.PrServiceReference.IPrService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PrServiceClient : System.ServiceModel.ClientBase<PrApplicatin.Tests.PrServiceReference.IPrService>, PrApplicatin.Tests.PrServiceReference.IPrService {
        
        public PrServiceClient() {
        }
        
        public PrServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PrServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PrServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PrServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PrApplicatin.Tests.PrServiceReference.Guest[] GetGuestsByEventIdAndGuestName(int eventId, string guestFullName) {
            return base.Channel.GetGuestsByEventIdAndGuestName(eventId, guestFullName);
        }
        
        public System.Threading.Tasks.Task<PrApplicatin.Tests.PrServiceReference.Guest[]> GetGuestsByEventIdAndGuestNameAsync(int eventId, string guestFullName) {
            return base.Channel.GetGuestsByEventIdAndGuestNameAsync(eventId, guestFullName);
        }
        
        public string EncryptPass(string password) {
            return base.Channel.EncryptPass(password);
        }
        
        public System.Threading.Tasks.Task<string> EncryptPassAsync(string password) {
            return base.Channel.EncryptPassAsync(password);
        }
        
        public PrApplicatin.Tests.PrServiceReference.Guest GetSpecificGuest(int eventId, int guestId) {
            return base.Channel.GetSpecificGuest(eventId, guestId);
        }
        
        public System.Threading.Tasks.Task<PrApplicatin.Tests.PrServiceReference.Guest> GetSpecificGuestAsync(int eventId, int guestId) {
            return base.Channel.GetSpecificGuestAsync(eventId, guestId);
        }
        
        public bool ChangeGuestStatus(int eventId, int guestId, bool attended, bool allCompanionsArrived, int companionsThatArrived) {
            return base.Channel.ChangeGuestStatus(eventId, guestId, attended, allCompanionsArrived, companionsThatArrived);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeGuestStatusAsync(int eventId, int guestId, bool attended, bool allCompanionsArrived, int companionsThatArrived) {
            return base.Channel.ChangeGuestStatusAsync(eventId, guestId, attended, allCompanionsArrived, companionsThatArrived);
        }
        
        public PrApplicatin.Tests.PrServiceReference.Event GetEventByID(int eventId) {
            return base.Channel.GetEventByID(eventId);
        }
        
        public System.Threading.Tasks.Task<PrApplicatin.Tests.PrServiceReference.Event> GetEventByIDAsync(int eventId) {
            return base.Channel.GetEventByIDAsync(eventId);
        }
        
        public PrApplicatin.Tests.PrServiceReference.Event GetEvent(string eventName, System.DateTime eventDate) {
            return base.Channel.GetEvent(eventName, eventDate);
        }
        
        public System.Threading.Tasks.Task<PrApplicatin.Tests.PrServiceReference.Event> GetEventAsync(string eventName, System.DateTime eventDate) {
            return base.Channel.GetEventAsync(eventName, eventDate);
        }
        
        public bool RemoveEvent(int eventId) {
            return base.Channel.RemoveEvent(eventId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveEventAsync(int eventId) {
            return base.Channel.RemoveEventAsync(eventId);
        }
        
        public PrApplicatin.Tests.PrServiceReference.Event[] GetEvents() {
            return base.Channel.GetEvents();
        }
        
        public System.Threading.Tasks.Task<PrApplicatin.Tests.PrServiceReference.Event[]> GetEventsAsync() {
            return base.Channel.GetEventsAsync();
        }
        
        public PrApplicatin.Tests.PrServiceReference.Event[] GetEventsByEventName(string eventName) {
            return base.Channel.GetEventsByEventName(eventName);
        }
        
        public System.Threading.Tasks.Task<PrApplicatin.Tests.PrServiceReference.Event[]> GetEventsByEventNameAsync(string eventName) {
            return base.Channel.GetEventsByEventNameAsync(eventName);
        }
        
        public PrApplicatin.Tests.PrServiceReference.Event[] GetEventsByEventDate(System.DateTime eventDate) {
            return base.Channel.GetEventsByEventDate(eventDate);
        }
        
        public System.Threading.Tasks.Task<PrApplicatin.Tests.PrServiceReference.Event[]> GetEventsByEventDateAsync(System.DateTime eventDate) {
            return base.Channel.GetEventsByEventDateAsync(eventDate);
        }
        
        public bool CreateEvent(string eventName, System.DateTime eventDate) {
            return base.Channel.CreateEvent(eventName, eventDate);
        }
        
        public System.Threading.Tasks.Task<bool> CreateEventAsync(string eventName, System.DateTime eventDate) {
            return base.Channel.CreateEventAsync(eventName, eventDate);
        }
        
        public bool AddGuest(int eventId, PrApplicatin.Tests.PrServiceReference.Guest guest) {
            return base.Channel.AddGuest(eventId, guest);
        }
        
        public System.Threading.Tasks.Task<bool> AddGuestAsync(int eventId, PrApplicatin.Tests.PrServiceReference.Guest guest) {
            return base.Channel.AddGuestAsync(eventId, guest);
        }
        
        public bool RemoveGuest(int eventId, int guestId) {
            return base.Channel.RemoveGuest(eventId, guestId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveGuestAsync(int eventId, int guestId) {
            return base.Channel.RemoveGuestAsync(eventId, guestId);
        }
        
        public PrApplicatin.Tests.PrServiceReference.User[] GetUsers() {
            return base.Channel.GetUsers();
        }
        
        public System.Threading.Tasks.Task<PrApplicatin.Tests.PrServiceReference.User[]> GetUsersAsync() {
            return base.Channel.GetUsersAsync();
        }
        
        public PrApplicatin.Tests.PrServiceReference.User GetUserById(int userId) {
            return base.Channel.GetUserById(userId);
        }
        
        public System.Threading.Tasks.Task<PrApplicatin.Tests.PrServiceReference.User> GetUserByIdAsync(int userId) {
            return base.Channel.GetUserByIdAsync(userId);
        }
        
        public bool AddUser(string userName, string password, bool isAdmin) {
            return base.Channel.AddUser(userName, password, isAdmin);
        }
        
        public System.Threading.Tasks.Task<bool> AddUserAsync(string userName, string password, bool isAdmin) {
            return base.Channel.AddUserAsync(userName, password, isAdmin);
        }
        
        public bool RemoveUserByUserName(string userName) {
            return base.Channel.RemoveUserByUserName(userName);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveUserByUserNameAsync(string userName) {
            return base.Channel.RemoveUserByUserNameAsync(userName);
        }
    }
}
